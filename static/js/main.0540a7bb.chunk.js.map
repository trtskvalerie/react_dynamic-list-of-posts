{"version":3,"sources":["api/api.ts","api/posts.ts","components/Loader/Loader.tsx","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getRequest","endpoint","a","fetch","response","json","deleteRequest","method","postRequest","body","headers","JSON","stringify","getPosts","getUserPosts","userId","getPostDetails","postId","Loader","className","PostsList","React","memo","posts","selectedPostId","setSelectedPostId","length","map","post","title","id","type","onClick","getPostComments","deletePostComment","commentId","postComment","commentBody","NewCommentForm","fetchComments","useState","isInvalidData","setInvalidData","isLoading","setLoading","name","setName","email","setEmail","setBody","resetForm","useCallback","updateComments","newComment","removeError","onSubmit","event","preventDefault","value","placeholder","onChange","target","PostDetails","setPost","comments","setComments","detailsLoading","setDetailsLoading","commentsVisible","setCommentsVisible","fetchPostDetails","useEffect","comment","filter","c","App","setPosts","postsLoading","setPostsLoading","selectedUserId","setSelectedUserId","fetchPosts","fetchUserPosts","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0540a7bb.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getRequest = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`);\n\n    return await response.json();\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const deleteRequest = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      method: 'DELETE',\n    });\n\n    return await response.json();\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const postRequest = async (endpoint: string, body: CommentToPost) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n\n    return await response.json();\n  } catch (error) {\n    return null;\n  }\n};\n","import { getRequest } from './api';\n\nexport const getPosts = async (): Promise<Post[]> => getRequest('/posts');\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => (\n  getRequest(`/posts?userId=${userId}`)\n);\n\nexport const getPostDetails = async (postId: number): Promise<Post> => (\n  getRequest(`/posts/${postId}`)\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\n\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number,\n  setSelectedPostId: (postId: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  selectedPostId,\n  setSelectedPostId,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    {posts.length === 0\n      ? <p>No posts found</p>\n      : (\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li className=\"PostsList__item\" key={post.id}>\n              <div>\n                <b>{`[User #${post.userId}]: `}</b>\n                {post.title}\n              </div>\n\n              {post.id === selectedPostId ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => setSelectedPostId(0)}\n                >\n                  Close\n                </button>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => setSelectedPostId(post.id)}\n                >\n                  Open\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      )}\n  </div>\n));\n","import { deleteRequest, getRequest, postRequest } from './api';\n\nexport const getPostComments = async (postId: number): Promise<Comment[]> => (\n  getRequest(`/comments?postId=${postId}`)\n);\n\nexport const deletePostComment = async (commentId: number) => (\n  deleteRequest(`/comments/${commentId}`)\n);\n\nexport const postComment = async (commentBody: CommentToPost) => (\n  postRequest('/comments', commentBody)\n);\n","import React, { useCallback, useState } from 'react';\nimport { postComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedPostId: number,\n  fetchComments: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({ selectedPostId, fetchComments }) => {\n  const [isInvalidData, setInvalidData] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const resetForm = useCallback(() => {\n    setName('');\n    setEmail('');\n    setBody('');\n  }, []);\n\n  const updateComments = useCallback(async (newComment: CommentToPost) => {\n    await postComment(newComment);\n    await fetchComments();\n    setLoading(false);\n  }, [fetchComments]);\n\n  const removeError = useCallback(() => {\n    if (isInvalidData) {\n      setInvalidData(false);\n    }\n  }, [isInvalidData]);\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name || !email || !body) {\n      setInvalidData(true);\n    } else {\n      setLoading(true);\n      const newComment = {\n        postId: selectedPostId,\n        name,\n        email,\n        body,\n      };\n\n      updateComments(newComment);\n      resetForm();\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            removeError();\n            setName(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            removeError();\n            setEmail(event.target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(event) => {\n            removeError();\n            setBody(event.target.value);\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n\n      {isInvalidData && <p>Enter valid data</p>}\n      {isLoading && <Loader />}\n    </form>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport './PostDetails.scss';\n\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { deletePostComment, getPostComments } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({ selectedPostId }) => {\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [detailsLoading, setDetailsLoading] = useState(true);\n  const [commentsVisible, setCommentsVisible] = useState(true);\n\n  const fetchComments = useCallback(async () => {\n    setComments(await getPostComments(selectedPostId));\n    setDetailsLoading(false);\n  }, [selectedPostId]);\n\n  const fetchPostDetails = useCallback(async () => {\n    setDetailsLoading(true);\n    setPost(await getPostDetails(selectedPostId));\n    fetchComments();\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    if (selectedPostId !== 0) {\n      fetchPostDetails();\n    }\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {detailsLoading\n        ? <Loader />\n        : (\n          <>\n            <section className=\"PostDetails__post\">\n              <p>{post?.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {comments.length === 0\n                ? <p>No comments</p>\n                : (\n                  <>\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => setCommentsVisible(!commentsVisible)}\n                    >\n                      {`${commentsVisible ? 'Hide' : 'Show'} ${comments.length} comments`}\n                    </button>\n\n                    {commentsVisible && (\n                      <ul className=\"PostDetails__list\">\n                        {comments.map(comment => (\n                          <li className=\"PostDetails__list-item\" key={comment.id}>\n                            <button\n                              type=\"button\"\n                              className=\"PostDetails__remove-button button\"\n                              onClick={() => {\n                                deletePostComment(comment.id);\n                                setComments(comments.filter(c => c.id !== comment.id));\n                              }}\n                            >\n                              X\n                            </button>\n                            <p>{comment.body}</p>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                  </>\n                )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm selectedPostId={selectedPostId} fetchComments={fetchComments} />\n              </div>\n            </section>\n          </>\n        )}\n    </div>\n  );\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { getPosts, getUserPosts } from './api/posts';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { Loader } from './components/Loader';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [postsLoading, setPostsLoading] = useState(true);\n\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const fetchPosts = useCallback(async () => {\n    setPostsLoading(true);\n    setPosts(await getPosts());\n    setPostsLoading(false);\n  }, []);\n\n  const fetchUserPosts = useCallback(async () => {\n    setPostsLoading(true);\n    setPosts(await getUserPosts(selectedUserId));\n    setPostsLoading(false);\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    if (selectedUserId === 0) {\n      fetchPosts();\n    } else {\n      fetchUserPosts();\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"user-selector\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"user-selector\"\n            value={selectedUserId}\n            onChange={(event) => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {postsLoading\n            ? <Loader />\n            : (\n              <PostsList\n                posts={posts}\n                selectedPostId={selectedPostId}\n                setSelectedPostId={setSelectedPostId}\n              />\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId === 0\n            ? <p>Select post to see details</p>\n            : <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}