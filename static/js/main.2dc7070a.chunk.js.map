{"version":3,"sources":["api/api.ts","api/posts.ts","components/PostsList/PostsList.tsx","api/comments.ts","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getRequest","endpoint","a","fetch","response","json","deleteRequest","method","postRequest","body","headers","JSON","stringify","getPosts","getUserPosts","userId","getPostDetails","postId","PostsList","React","memo","posts","selectedPostId","setSelectedPostId","className","length","map","post","title","id","type","onClick","getPostComments","deletePostComment","commentId","postComment","commentBody","NewCommentForm","fetchComments","useState","isInvalidData","setInvalidData","isLoading","setLoading","nameRef","useRef","document","createElement","emailRef","bodyRef","updateComments","newComment","onSubmit","event","preventDefault","name","current","value","email","ref","placeholder","onChange","PostDetails","setPost","comments","setComments","detailsLoading","setDetailsLoading","commentsVisible","setCommentsVisible","fetchPostDetails","useEffect","comment","filter","c","App","setPosts","postsLoading","setPostsLoading","selectedUserId","setSelectedUserId","fetchPosts","fetchUserPosts","htmlFor","target","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2dc7070a.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getRequest = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`);\n\n    return await response.json();\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const deleteRequest = async (endpoint: string) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      method: 'DELETE',\n    });\n\n    return await response.json();\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const postRequest = async (endpoint: string, body: CommentToPost) => {\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, {\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      method: 'POST',\n      body: JSON.stringify(body),\n    });\n\n    return await response.json();\n  } catch (error) {\n    return null;\n  }\n};\n","import { getRequest } from './api';\n\nexport const getPosts = async (): Promise<Post[]> => getRequest('/posts');\n\nexport const getUserPosts = async (userId: number): Promise<Post[]> => (\n  getRequest(`/posts?userId=${userId}`)\n);\n\nexport const getPostDetails = async (postId: number): Promise<Post> => (\n  getRequest(`/posts/${postId}`)\n);\n","import React from 'react';\n\nimport './PostsList.scss';\n\ntype Props = {\n  posts: Post[],\n  selectedPostId: number,\n  setSelectedPostId: (postId: number) => void,\n};\n\nexport const PostsList: React.FC<Props> = React.memo(({\n  posts,\n  selectedPostId,\n  setSelectedPostId,\n}) => {\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      {posts.length === 0\n        ? <p>No posts found</p>\n        : (\n          <ul className=\"PostsList__list\">\n            {posts.map(post => (\n              <li className=\"PostsList__item\" key={post.id}>\n                <div>\n                  <b>{`[User #${post.userId}]: `}</b>\n                  {post.title}\n                </div>\n\n                {post.id === selectedPostId ? (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => setSelectedPostId(0)}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    className=\"PostsList__button button\"\n                    onClick={() => setSelectedPostId(post.id)}\n                  >\n                    Open\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        )}\n    </div>\n  );\n});\n","import { deleteRequest, getRequest, postRequest } from './api';\n\nexport const getPostComments = async (postId: number): Promise<Comment[]> => (\n  getRequest(`/comments?postId=${postId}`)\n);\n\nexport const deletePostComment = async (commentId: number) => (\n  deleteRequest(`/comments/${commentId}`)\n);\n\nexport const postComment = async (commentBody: CommentToPost) => (\n  postRequest('/comments', commentBody)\n);\n","import React, { useState } from 'react';\nimport { postComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  selectedPostId: number,\n  fetchComments: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ selectedPostId, fetchComments }) => {\n  const [isInvalidData, setInvalidData] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const nameRef = React.useRef(document.createElement('input'));\n  const emailRef = React.useRef(document.createElement('input'));\n  const bodyRef = React.useRef(document.createElement('textarea'));\n\n  const updateComments = async (newComment: CommentToPost) => {\n    await postComment(newComment);\n    await fetchComments();\n    setLoading(false);\n  };\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setLoading(true);\n\n    const name = nameRef.current.value;\n    const email = emailRef.current.value;\n    const body = bodyRef.current.value;\n\n    if (!name || !email || !body) {\n      setInvalidData(true);\n    } else {\n      const newComment = {\n        postId: selectedPostId,\n        name,\n        email,\n        body,\n      };\n\n      nameRef.current.value = '';\n      emailRef.current.value = '';\n      bodyRef.current.value = '';\n\n      updateComments(newComment);\n    }\n  };\n\n  return (\n    <form className=\"NewCommentForm\" onSubmit={onSubmit}>\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          ref={nameRef}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={() => {\n            if (isInvalidData) {\n              setInvalidData(false);\n            }\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          ref={emailRef}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={() => {\n            if (isInvalidData) {\n              setInvalidData(false);\n            }\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          ref={bodyRef}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={() => {\n            if (isInvalidData) {\n              setInvalidData(false);\n            }\n          }}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n\n      {isInvalidData && <p>Enter valid data</p>}\n      {isLoading && <p>Loading...</p>}\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport './PostDetails.scss';\n\nimport { NewCommentForm } from '../NewCommentForm';\nimport { getPostDetails } from '../../api/posts';\nimport { deletePostComment, getPostComments } from '../../api/comments';\n\ntype Props = {\n  selectedPostId: number,\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({ selectedPostId }) => {\n  const [post, setPost] = useState<Post>();\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [detailsLoading, setDetailsLoading] = useState(true);\n  const [commentsVisible, setCommentsVisible] = useState(true);\n\n  const fetchComments = async () => {\n    setComments(await getPostComments(selectedPostId));\n    setDetailsLoading(false);\n  };\n\n  const fetchPostDetails = async () => {\n    setDetailsLoading(true);\n    setPost(await getPostDetails(selectedPostId));\n    fetchComments();\n  };\n\n  useEffect(() => {\n    if (selectedPostId !== 0) {\n      fetchPostDetails();\n    }\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      {detailsLoading\n        ? <p>Loading details...</p>\n        : (\n          <>\n            <section className=\"PostDetails__post\">\n              <p>{post?.title}</p>\n            </section>\n\n            <section className=\"PostDetails__comments\">\n              {comments.length === 0\n                ? <p>No comments</p>\n                : (\n                  <>\n                    <button\n                      type=\"button\"\n                      className=\"button\"\n                      onClick={() => setCommentsVisible(!commentsVisible)}\n                    >\n                      {`${commentsVisible ? 'Hide' : 'Show'} ${comments.length} comments`}\n                    </button>\n\n                    {commentsVisible && (\n                      <ul className=\"PostDetails__list\">\n                        {comments.map(comment => (\n                          <li className=\"PostDetails__list-item\" key={comment.id}>\n                            <button\n                              type=\"button\"\n                              className=\"PostDetails__remove-button button\"\n                              onClick={() => {\n                                deletePostComment(comment.id);\n                                setComments(comments.filter(c => c.id !== comment.id));\n                              }}\n                            >\n                              X\n                            </button>\n                            <p>{comment.body}</p>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                  </>\n                )}\n            </section>\n\n            <section>\n              <div className=\"PostDetails__form-wrapper\">\n                <NewCommentForm selectedPostId={selectedPostId} fetchComments={fetchComments} />\n              </div>\n            </section>\n          </>\n        )}\n    </div>\n  );\n});\n","import React, { useEffect, useState } from 'react';\nimport { getPosts, getUserPosts } from './api/posts';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [postsLoading, setPostsLoading] = useState(true);\n\n  const [selectedPostId, setSelectedPostId] = useState(0);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n\n  const fetchPosts = async () => {\n    setPostsLoading(true);\n    setPosts(await getPosts());\n    setPostsLoading(false);\n  };\n\n  const fetchUserPosts = async () => {\n    setPostsLoading(true);\n    setPosts(await getUserPosts(selectedUserId));\n    setPostsLoading(false);\n  };\n\n  useEffect(() => {\n    fetchPosts();\n  }, []);\n\n  useEffect(() => {\n    if (selectedUserId === 0) {\n      fetchPosts();\n    } else {\n      fetchUserPosts();\n    }\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"user-selector\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"user-selector\"\n            value={selectedUserId}\n            onChange={(event) => setSelectedUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {postsLoading\n            ? <p>Loading posts...</p>\n            : (\n              <PostsList\n                posts={posts}\n                selectedPostId={selectedPostId}\n                setSelectedPostId={setSelectedPostId}\n              />\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId === 0\n            ? <p>Select post to see details</p>\n            : <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}